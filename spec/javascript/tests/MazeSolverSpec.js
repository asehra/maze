describe('MazeSolver', function() {
  it('solves the basic maze with one room', function() {
    expect(MazeSolver.solve([
      [1,1,1],
      [0,0,0],
      [1,1,1]
    ])).toEqual(
      "▓▓▓\n" +
      "***\n" +
      "▓▓▓"
    );
  });

  it('solves a bigger maze', function() {
    expect(MazeSolver.solve([
      [1,1,1,1,1],
      [0,0,0,0,1],
      [1,1,0,1,1],
      [1,0,0,0,0],
      [1,1,1,1,1]
    ])).toEqual(
      "▓▓▓▓▓\n" +
      "*** ▓\n" +
      "▓▓*▓▓\n" +
      "▓ ***\n" +
      "▓▓▓▓▓"
    );
  });

  it('solves a complicated maze with movements in all directions', function() {
    expect(MazeSolver.solve([
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
      [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
      [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
      [1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
      [1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
      [1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1],
      [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
      [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
      [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1],
      [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
      [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1],
      [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1],
      [1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1],
      [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
      [1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
      [1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1],
      [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
      [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
      [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ])).toEqual(
"▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓\n" +
"****▓*******▓     ▓ ▓\n" +
"▓ ▓*▓*▓▓▓ ▓*▓ ▓▓▓▓▓ ▓\n" +
"▓ ▓***▓   ▓*****    ▓\n" +
"▓▓▓ ▓ ▓▓▓▓▓▓▓▓▓*▓▓▓▓▓\n" +
"▓   ▓         ▓*    ▓\n" +
"▓ ▓ ▓ ▓▓▓ ▓▓▓▓▓*▓▓▓ ▓\n" +
"▓ ▓ ▓ ▓   ▓  ***  ▓ ▓\n" +
"▓▓▓ ▓▓▓▓▓ ▓▓▓*▓ ▓▓▓ ▓\n" +
"▓     ▓     ▓*▓   ▓ ▓\n" +
"▓▓▓ ▓ ▓▓▓ ▓ ▓*▓ ▓ ▓ ▓\n" +
"▓   ▓   ▓ ▓ ▓*▓ ▓ ▓ ▓\n" +
"▓ ▓ ▓▓▓▓▓ ▓ ▓*▓ ▓▓▓▓▓\n" +
"▓ ▓ ▓ ▓   ▓ ▓*▓     ▓\n" +
"▓ ▓▓▓ ▓ ▓ ▓▓▓*▓▓▓▓▓▓▓\n" +
"▓ ▓ ▓   ▓ ▓  *▓*****▓\n" +
"▓ ▓ ▓▓▓▓▓ ▓▓▓*▓*▓▓▓*▓\n" +
"▓ ▓   ▓     ▓***  ▓*▓\n" +
"▓ ▓ ▓ ▓ ▓ ▓ ▓ ▓▓▓▓▓*▓\n" +
"▓   ▓ ▓ ▓ ▓ ▓     ▓**\n" +
"▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓"
    );
  });

});
